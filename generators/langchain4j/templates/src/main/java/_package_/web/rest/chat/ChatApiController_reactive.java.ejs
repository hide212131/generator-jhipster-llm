package <%= packageName %>.web.rest.chat;

import <%= packageName %>.service.api.dto.*;
import io.swagger.v3.oas.annotations.Parameter;
import dev.langchain4j.data.message.AiMessage;
import dev.langchain4j.data.message.SystemMessage;
import dev.langchain4j.data.message.UserMessage;
import dev.langchain4j.model.StreamingResponseHandler;
import dev.langchain4j.model.chat.StreamingChatLanguageModel;
import dev.langchain4j.model.output.Response;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import java.util.List;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-08T22:40:49.631444+09:00[Asia/Tokyo]")
@RestController
@RequestMapping("${openapi.my-llm-app.base-path:/v1}")
public class ChatApiController implements ChatApi {

    private final StreamingChatLanguageModel chatClient;

    public ChatApiController(StreamingChatLanguageModel chatClient) {
        this.chatClient = chatClient;
    }

    @Override
    public Flux<CreateChatCompletionStreamResponse> createChatCompletion(
        @Parameter(name = "CreateChatCompletionRequest", description = "", required = true) @Valid @RequestBody Mono<
            CreateChatCompletionRequest
        > createChatCompletionRequestMono,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return createChatCompletionRequestMono.flatMapMany(createChatCompletionRequest -> {
            var messages = createChatCompletionRequest.getMessages()
                .stream()
                .map(message -> {
                    if (message instanceof ChatCompletionRequestSystemMessage systemMessage) {
                        return new SystemMessage(systemMessage.getContent());
                    } else if (message instanceof ChatCompletionRequestUserMessage userMessage) {
                        return new UserMessage(userMessage.getContent());
                    } else if (message instanceof ChatCompletionRequestAssistantMessage assistantMessage) {
                        return new AiMessage(assistantMessage.getContent());
                    } else {
                        throw new RuntimeException("Unknown message type");
                    }
                })
                .toList();

            return Flux.create(emitter -> {
                chatClient.generate(
                    messages,
                    new StreamingResponseHandler<AiMessage>() {
                        @Override
                        public void onNext(String token) {
                            var responseDelta = new ChatCompletionStreamResponseDelta()
                                .content(token)
                                .role(ChatCompletionStreamResponseDelta.RoleEnum.ASSISTANT);
                            var choices = new CreateChatCompletionStreamResponseChoicesInner()
                                .index(0L)
                                .finishReason(null)
                                .delta(responseDelta);
                            var response = new CreateChatCompletionStreamResponse(
                                "chatcmpl-123",
                                List.of(choices),
                                System.currentTimeMillis(),
                                "gpt-3.5-turbo",
                                CreateChatCompletionStreamResponse.ObjectEnum.CHAT_COMPLETION_CHUNK
                            );
                            emitter.next(response);
                        }

                        @Override
                        public void onComplete(Response<AiMessage> response) {
                            var streamResponse = new CreateChatCompletionStreamResponse(
                                "chatcmpl-123",
                                List.of(
                                    new CreateChatCompletionStreamResponseChoicesInner()
                                        .index(0L)
                                        .finishReason(CreateChatCompletionStreamResponseChoicesInner.FinishReasonEnum.STOP)
                                        .delta(new ChatCompletionStreamResponseDelta())
                                ),
                                System.currentTimeMillis(),
                                "gpt-3.5-turbo",
                                CreateChatCompletionStreamResponse.ObjectEnum.CHAT_COMPLETION_CHUNK
                            );
                            emitter.next(streamResponse);
                            emitter.complete();
                        }

                        @Override
                        public void onError(Throwable error) {
                            emitter.error(error);
                        }
                    }
                );
            });
        });
    }
}
