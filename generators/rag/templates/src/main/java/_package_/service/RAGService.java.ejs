package <%= packageName %>.service;

import <%= packageName %>.domain.DocumentAsset;
import <%= packageName %>.repository.DocumentAssetRepository;
import java.io.File;
import java.io.IOException;
import java.util.List;

import jakarta.validation.constraints.Null;
import org.jetbrains.annotations.NotNull;
import org.springframework.ai.document.Document;
import org.springframework.ai.embedding.EmbeddingModel;
import org.springframework.ai.reader.ExtractedTextFormatter;
import org.springframework.ai.reader.pdf.PagePdfDocumentReader;
import org.springframework.ai.reader.pdf.config.PdfDocumentReaderConfig;
import org.springframework.ai.transformer.splitter.TokenTextSplitter;
import org.springframework.ai.vectorstore.VectorStore;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Service;

@Service
public class RAGService {

    private final DocumentAssetRepository documentAssetRepository;
    private final VectorStore vectorStore;
    private final JdbcTemplate jdbcTemplate;
    private final EmbeddingModel embeddingModel;

    public RAGService(DocumentAssetRepository documentAssetRepository, VectorStore vectorStore, JdbcTemplate jdbcTemplate, EmbeddingModel embeddingModel) {
        this.documentAssetRepository = documentAssetRepository;
        this.vectorStore = vectorStore;
        this.jdbcTemplate = jdbcTemplate;
        this.embeddingModel = embeddingModel;
    }

    public DocumentAsset storeFile(DocumentAsset document) {
        DocumentAsset savedFile = documentAssetRepository.save(document);

        var pdfResource = new ByteArrayResource(savedFile.getData()) {
            @Override
            @Nullable
            public String getFilename() {
                return document.getFilename();
            }
        };

        var config = PdfDocumentReaderConfig.builder()
            .withPageExtractedTextFormatter(new ExtractedTextFormatter.Builder()
                .withNumberOfBottomTextLinesToDelete(3)
                .withNumberOfTopPagesToSkipBeforeDelete(1)
                .build())
            .withPagesPerDocument(1)
            .build();

        var pdfReader = new PagePdfDocumentReader(pdfResource, config);
        var textSplitter = new TokenTextSplitter() {
            @Override
            protected List<String> splitText(String text) {
                return doSplit(text, embeddingModel.dimensions());
            }
        };
        List<Document> documents = textSplitter.apply(pdfReader.get());
        vectorStore.accept(documents);

        return savedFile;
    }

    public void deleteFile(Long id) {
        DocumentAsset document = documentAssetRepository.findById(id).orElse(null);
        if (document != null) {
            String deleteSql = "DELETE FROM vector_store WHERE metadata->>'id' = ?";
            jdbcTemplate.update(deleteSql, document.getId());
            documentAssetRepository.deleteById(id);
        }
    }
}