package <%= packageName %>.service;

import <%= packageName %>.domain.DocumentAsset;
import <%= packageName %>.repository.DocumentAssetRepository;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.ai.chat.messages.UserMessage;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.ai.document.Document;
import org.springframework.ai.embedding.EmbeddingModel;
import org.springframework.ai.reader.ExtractedTextFormatter;
import org.springframework.ai.reader.pdf.PagePdfDocumentReader;
import org.springframework.ai.reader.pdf.config.PdfDocumentReaderConfig;
import org.springframework.ai.transformer.splitter.TokenTextSplitter;
import org.springframework.ai.vectorstore.SearchRequest;
import org.springframework.ai.vectorstore.VectorStore;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Service;

@Service
public class RAGService {

    private final DocumentAssetRepository documentAssetRepository;
    private final VectorStore vectorStore;
    private final JdbcTemplate jdbcTemplate;
    private final EmbeddingModel embeddingModel;

    public RAGService(DocumentAssetRepository documentAssetRepository, VectorStore vectorStore, JdbcTemplate jdbcTemplate, EmbeddingModel embeddingModel) {
        this.documentAssetRepository = documentAssetRepository;
        this.vectorStore = vectorStore;
        this.jdbcTemplate = jdbcTemplate;
        this.embeddingModel = embeddingModel;
    }

    public DocumentAsset storeFile(DocumentAsset document) {
        DocumentAsset savedFile = documentAssetRepository.save(document);

        var pdfResource = new ByteArrayResource(savedFile.getData()) {
            @Override
            @Nullable
            public String getFilename() {
                return document.getFilename();
            }
        };

        var config = PdfDocumentReaderConfig.builder()
            .withPageExtractedTextFormatter(new ExtractedTextFormatter.Builder()
                .withNumberOfBottomTextLinesToDelete(3)
                .withNumberOfTopPagesToSkipBeforeDelete(1)
                .build())
            .withPagesPerDocument(1)
            .build();

        var pdfReader = new PagePdfDocumentReader(pdfResource, config);
        var textSplitter = new TokenTextSplitter() {
            @Override
            protected List<String> splitText(String text) {
                return doSplit(text, embeddingModel.dimensions());
            }
        };
        List<Document> documents = textSplitter.apply(pdfReader.get());
        vectorStore.accept(documents);

        return savedFile;
    }

    public void deleteFile(Long id) {
        DocumentAsset document = documentAssetRepository.findById(id).orElse(null);
        if (document != null) {
            String deleteSql = "DELETE FROM vector_store WHERE metadata->>'id' = ?";
            jdbcTemplate.update(deleteSql, document.getId());
            documentAssetRepository.deleteById(id);
        }
    }

    public Prompt retrieveAndGeneratePrompt(Prompt originalPrompt) {
        var instructions = originalPrompt.getInstructions();
        UserMessage lastUserMessage = null;
        for (int i = instructions.size() - 1; i >= 0; i--) {
            if (instructions.get(i) instanceof UserMessage) {
                lastUserMessage = (UserMessage) instructions.get(i);
                List<Document> results = vectorStore.similaritySearch(
                    SearchRequest.query(lastUserMessage.getContent()).withTopK(5)
                );
                String references = results.stream().map(Document::getContent).collect(Collectors.joining("\n"));
                var newInstructions = new ArrayList<>(instructions);
                String newMessage =
                    "Please answer the questions in the 'UserMessage'. Find the information you need to answer in the 'References' section. If you do not have the information, please answer with 'I don't know'.\n" +
                        "UserMessage: " +
                        lastUserMessage.getContent() +
                        "\n" +
                        "References: " +
                        references;
                System.out.println("newMessage: " + newMessage);
                newInstructions.set(i, new UserMessage(newMessage));
                return new Prompt(newInstructions);
            }
        }
        return originalPrompt;
    }
}