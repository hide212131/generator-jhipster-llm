import path from 'path';
import { pipeline } from 'stream/promises';
import fetch from 'node-fetch';
import fs from 'fs-extra';
import { Transform } from 'readable-stream';

let [modelHome, modelName, modelUrl] = process.argv.slice(2);

// Overwrite modelHome if the environment variable JHIPSTER_LLM_MODELS_HOME is set
if (process.env.JHIPSTER_LLM_MODELS_HOME) {
  console.log(`Environment variable JHIPSTER_LLM_MODELS_HOME is set. Overwriting modelHome.`);
  console.log(`Original modelHome: ${modelHome}`);
  modelHome = process.env.JHIPSTER_LLM_MODELS_HOME;
  console.log(`New modelHome: ${modelHome}`);
}

const modelPath = path.join(modelHome, modelName);

const downloadModel = async () => {
  try {
    await fs.ensureDir(modelHome);

    if (await fs.pathExists(modelPath)) {
      console.log(`Model already exists at ${modelPath}`);
      return;
    }

    console.log(`Downloading model from ${modelUrl} to ${modelHome}`);
    const res = await fetch(modelUrl, { redirect: 'follow' });
    if (!res.ok) {
      throw new Error(`Failed to download model: ${res.status} ${res.statusText}`);
    }

    const totalSize = parseInt(res.headers.get('content-length'), 10);
    let downloadedSize = 0;
    let lastDisplayedProgress = 0;

    const progressTransform = new Transform({
      transform(chunk, encoding, callback) {
        downloadedSize += chunk.length;
        const progress = (downloadedSize / totalSize) * 100;
        if (progress >= lastDisplayedProgress + 10) {
          console.log(`Downloading... ${progress.toFixed(0)}% (${downloadedSize} / ${totalSize} bytes)`);
          lastDisplayedProgress = Math.floor(progress / 10) * 10;
        }
        callback(null, chunk);
      },
    });

    await pipeline(res.body, progressTransform, fs.createWriteStream(modelPath));
    console.log('Download completed.');
  } catch (err) {
    console.error('An error occurred:', err);
    await fs.remove(modelPath); // Delete the file if it exists
  }
};

downloadModel();